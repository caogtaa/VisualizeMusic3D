// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-07-06 06:00:19
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-07-06 06:15:30
*/ 
// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        tex2: { value: white }
        row: { value: 0. }
        startCol: { value: 0. }
        endCol: { value: 0.0625 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform sampler2D tex2;     // 缓存纹理，保存上一帧状态

  uniform UARGS {
    // vec2 grids;   // 水平、垂直格子数量
    float row;
    float startCol;
    float endCol;
  };

  // https://www.shadertoy.com/view/MsS3Wc
  // Smooth HSV to RGB conversion 
  vec3 hsv2rgb_smooth(in vec3 c) {
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	
    return c.z * mix(vec3(1.0), rgb, c.y);
  }
  
  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d - c) + c;
  }

  vec4 frag () {
    vec2 uv = uv0;
    vec2 grids = vec2(1., 32.);

    // 网格化
    vec2 guv = fract(uv * grids);
    vec2 gid = floor(uv * grids);

    // 从频域数据上采样，uv.x对应频率
    // todo: optimize Remap
    // todo: merge with the other Remap
    // 低音区、中音区分别采样后插值
    float colBass = Remap(0., 1., startCol, endCol, 0. / grids.y);  // 将uv从[0, 1]映射到当前采样对应的纹理区间
    float colMid = Remap(0., 1., startCol, endCol, 12. / grids.y);

    // 控制是否进行shift，设每1秒shift 30次（即每隔一帧移动一次）。尽量取fps整数倍减少误差
    float shift = step(fract(cc_time.x * 30.), 0.5);

    // 从上一个buffer中采样时对应的gid
    float prevGid = gid.y - shift;

    // shift buffer
    float v = 0.;
    if (prevGid < 0.)
      v = (texture(cc_spriteTexture, vec2(colBass, row)).r + texture(cc_spriteTexture, vec2(colMid, row)).r) * 0.5;
    else
      v = texture(tex2, vec2(0., prevGid / grids.y)).r;   // 竖条纹理采样

    vec4 c = vec4(vec3(v), 1.);
    return c;
  }
}%
