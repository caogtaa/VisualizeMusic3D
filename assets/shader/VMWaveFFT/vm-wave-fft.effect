// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-07-06 06:00:19
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-07-06 06:15:30
*/ 
// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <common>
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  float Capsule(vec2 p, float o, float width, float height, float blur) {
    float d = distance(p, vec2(clamp(p.x, o - height * 0.5, o + height * 0.5), 0.));
    return d;
  }

  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d - c) + c;
  }

  float squared(float value) {
    return value * value;
  }

  float getWeight(float x) {
    return texture(cc_spriteTexture, vec2(0.5, x)).r;
  }

  // 假设0位置和1位置分别是两个amp=a、b的正弦高峰，在x位置采样两个正弦波的叠加值
  float lerpCos(float a, float b, float x) {
    return cos(x * PI * 0.5) * a + cos((1.-x) * PI * 0.5) * b;
  }

  vec4 frag () {
    vec2 uv = uv0;

    // uv缩放为正方形，hardcode屏幕分辨率
    // uv.y *= 1280./720.;

    uv.y = uv.y * 2.0 - 1.0;

    float lineIntensity;
    float glowWidth;
    vec3 color = vec3(0.0);
    float t = -cc_time.x;
      
    for (float i = 0.0; i < 1.0; i++) {
      // uv.y += (0.2 * sin(uv.x + i/7.0 - t * 0.6));
      uv.y += (0.2 * sin(uv.x + i/7.0));
      // float col = Remap(0., 1., startCol, endCol, uv0.x);
      vec2 h2;

      // 采样区间缩小（只采样前几个frame）
      float scale = 1.;

      h2.x = getWeight(uv0.x * scale);
      h2.y = getWeight((uv0.x + 1./32.) * scale); // 采样下一格
      // float h = getWeight(uv0.x);
      float f = fract(uv0.x * 32.);
      float lerpF = f * f * (3.0 - 2.0 * f);
      //float lerpF = lerpCos(h2.x, h2.y, f);
      float h = mix(h2.x, h2.y, lerpF);

      // float Y = uv.y + h * 0.5;
          // 0.5;//(texture(cc_spriteTexture, vec2(1., col)).x - 0.5);
      lineIntensity = 0.4 + squared(1.6 * abs(mod(uv0.x + i / 1.3 + t,2.0) - 1.0));
      // lineIntensity = 0.4;

      // 线的厚度和h相关
      // lineIntensity = pow((h+0.4), 3.);//squared(h);// squared(1.6 * abs(mod(h*20.,2.0) - 1.0));
      // 开头粗一些
      // lineIntensity *= Remap(0., 1., 5., 1., uv0.x);

      glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2)));
      glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2 + h)));
      color += vec3(glowWidth * (2.0 + sin(t * 0.13)),
                    glowWidth * (2.0 - sin(t * 0.23)),
                    glowWidth * (2.0 - cos(t * 0.19)));
    }

    return vec4(color, 1.0);
  }
}%
