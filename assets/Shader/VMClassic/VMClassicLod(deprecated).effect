// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-05-09 21:11:36
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-09 21:13:59
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        grids: { value: [32., 38.] }
        scaleX: { value: 1.0 }
        lod: { value: 1.0 }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  #extension GL_EXT_shader_texture_lod : enable
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.14159265
  
  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  uniform UARGS {
    vec2 grids;   // 水平、垂直格子数量
    float scaleX; // 水平轴缩放比例。截断高频部分。
    float lod;
  };

  // https://www.shadertoy.com/view/MsS3Wc
  // Smooth HSV to RGB conversion 
  vec3 hsv2rgb_smooth(in vec3 c) {
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	
    return c.z * mix(vec3(1.0), rgb, c.y);
  }

  void main()
  {
    vec2 uv = v_uv0.xy;
    // vec2 uvOld = uv;

    // uv缩放为正方形，hardcode屏幕分辨率
    uv.y *= 1280./720.;

    uv.y = uv.y * 2.0 - 1.0;

    // uv缩放偏移使左右屏幕留边（可以和1280./720.计算合并）
    uv = uv * 1.1 - 0.05;

    // 网格化
    vec2 guv = fract(uv * grids);
    vec2 gi = floor(uv * grids);

    // 从频域数据上采样，uv.x对应频率
    #ifdef GL_EXT_shader_texture_lod
      float h = texture2DLodEXT(texture, vec2(gi.x / grids.x * scaleX, 0.5), lod).r;
    #else
      float h = texture(texture, vec2(gi.x / grids.x * scaleX, 0.5)).r;
    #endif

    // 只展示频域数值以下颜色
    // Y轴保留整数格（h取值floor）
    // abs加倒影（上下对称）
    float mask = step(abs(uv.y), floor(h * grids.y) / grids.y);

    // 截断左右留边部分
    // mask *= step(0., uv.x) * step(uv.x, 1.0);
    mask *= step(abs(uv.x - 0.5), 0.5);

    // 倒影变透明
    // mix(0.2, 1.0, step(0.0, uv.y));
    mask *= uv.y < 0. ? 0.2 : 1.0;

    // // 网格左右留空 0.15（换种说法：距离中心0.35的保留）
    // mask *= smoothstep(0.5, 0.35, abs(guv.x - 0.5));
    // // Y轴离散化，网格上下留空
    // mask *= smoothstep(0.5, 0.35, abs(guv.y - 0.5));
    vec2 gap = vec2(0.5, 0.35);
    gap = smoothstep(gap.xx, gap.yy, abs(guv - gap.xx));
    mask = mask * gap.x * gap.y;

    // 整体强化下遮罩（一丢丢背景色）
    // mask += 0.3;
    // 左右留边部分淡出
    mask += smoothstep(0.55, 0.5, abs(uv.x - 0.5)) * 0.3;    

    // 在光谱上取色
    vec3 hsl = vec3(uv.x, 1.0, 1.0-uv.y);
    vec3 rgb_s = hsv2rgb_smooth(hsl);
    rgb_s *= mask;

    vec4 col = vec4(rgb_s, mask);
    gl_FragColor = col;
  }
}%
