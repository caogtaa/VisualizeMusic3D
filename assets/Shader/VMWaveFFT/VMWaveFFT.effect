// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-05-09 21:11:36
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-09 21:13:59
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs
      frag: unlit-fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        mainTexture: { value: white }
}%

CCProgram unlit-vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_uv0.y = 1.0 - v_uv0.y;  // flip y

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.14159265
  
  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D mainTexture;

  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d - c) + c;
  }

  float squared(float value) {
    return value * value;
  }

  // float getAmp(float frequency) {
  //   float x = frequency / 512.0;
  //   float col = Remap(0., 1., startCol, endCol, x);
  //   return texture(mainTexture, vec2(col, row)).r;
  //   // return texture(iChannel0, , 0)).x;
  // }

  float getWeight(float x) {
    return texture(mainTexture, vec2(x, 0.5)).r;
    // no much difference in my case
    // return getAmp(f);
    // return (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;
  }

  // 假设0位置和1位置分别是两个amp=a、b的正弦高峰，在x位置采样两个正弦波的叠加值
  float lerpCos(float a, float b, float x) {
    return cos(x * PI * 0.5) * a + cos((1.-x) * PI * 0.5) * b;
  }

  // inspired by
  // https://www.shadertoy.com/view/4ljGD1
  void main()
  {
    vec2 uv = v_uv0.xy;
    // vec2 uvOld = uv;

    // uv缩放为正方形，hardcode屏幕分辨率
    // uv.y *= 1280./720.;

    uv.y = uv.y * 2.0 - 1.0;

    float lineIntensity;
    float glowWidth;
    vec3 color = vec3(0.0);
    float t = -cc_time.x;
      
    for (float i = 0.0; i < 1.0; i++) {
      // uv.y += (0.2 * sin(uv.x + i/7.0 - t * 0.6));
      uv.y += (0.2 * sin(uv.x + i/7.0));
      // float col = Remap(0., 1., startCol, endCol, v_uv0.x);
      vec2 h2;

      // 采样区间缩小（只采样前几个frame）
      float scale = 1.;

      h2.x = getWeight(v_uv0.x * scale);
      h2.y = getWeight((v_uv0.x + 1./32.) * scale); // 采样下一格
      // float h = getWeight(v_uv0.x);
      float f = fract(v_uv0.x * 32.);
      float lerpF = f * f * (3.0 - 2.0 * f);
      //float lerpF = lerpCos(h2.x, h2.y, f);
      float h = mix(h2.x, h2.y, lerpF);

      // float Y = uv.y + h * 0.5;
          // 0.5;//(texture(mainTexture, vec2(col, 1.)).x - 0.5);
      lineIntensity = 0.4 + squared(1.6 * abs(mod(v_uv0.x + i / 1.3 + t,2.0) - 1.0));
      // lineIntensity = 0.4;

      // 线的厚度和h相关
      // lineIntensity = pow((h+0.4), 3.);//squared(h);// squared(1.6 * abs(mod(h*20.,2.0) - 1.0));
      // 开头粗一些
      // lineIntensity *= Remap(0., 1., 5., 1., v_uv0.x);

      glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2)));
      glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2 + h)));
      color += vec3(glowWidth * (2.0 + sin(t * 0.13)),
                    glowWidth * (2.0 - sin(t * 0.23)),
                    glowWidth * (2.0 - cos(t * 0.19)));
    }

    gl_FragColor = vec4(color, 1.0);
  }
}%
