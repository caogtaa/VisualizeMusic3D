// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-05-09 21:11:36
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-09 21:13:59
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.14159265
  
  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  
  float Capsule(vec2 p, float o, float width, float height, float blur) {
    float d = distance(p, vec2(clamp(p.x, o - height * 0.5, o + height * 0.5), 0.));
    return d;
  }

  void main()
  {
    vec2 uv = v_uv0.xy;
    vec4 col = texture(texture, uv) * v_color;

    uv = uv * 2.0 - 1.0;
    uv.y *= 1280./720.; // todo: use uniform attribute
    uv.x = abs(uv.x);

    float angle = atan(uv.y, uv.x);

    // 左右声道各32份（目前左右声道对称）
    float grids = 64.;

    // remap angle to [0, 1]
    // angle = Remap(-PI, PI, 0., 1., angle);
    angle = angle / (2. * PI) + 0.5;

    // angle = 0位置和y正轴对齐
    angle = fract(angle + 0.75);
    
    // float dist = distance(uv, vec2(0.));
    float dist = length(uv);
    
    // angle分区，并且顺时针偏移一半，方便计算Capsule
    float part_angle = fract(angle * grids) - 0.5;

    // 采样频率amp，同一个grid使用相同采样
    float part_id = floor(angle * grids);
    float h = texture(texture, vec2(part_id * 2. / grids, 0.5)).r * 0.25;    
    
    // 还原回原来的uv坐标，此时所有grid的坐标已经折叠
    vec2 guv = vec2(cos(part_angle / grids * 2. * PI), sin(part_angle / grids * 2. * PI)) * dist;

    float width = 0.005;
    float blur = 4. / 720.;

    float mask = Capsule(guv, 0.6, width, h, blur);
    mask = smoothstep(width+blur, width, mask);

    vec3 color = vec3(mask);

    gl_FragColor = vec4(color, mask);
  }
}%
