// Copyright 2021 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-05-09 21:11:36
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-09 21:13:59
*/ 

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        tex2: { value: white }
        grids: { value: [32., 38.] }
        row: { value: 0. }
        startCol: { value: 0. }
        endCol: { value: 0.0625 }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.14159265
  
  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  uniform sampler2D tex2;     // 缓存纹理，保存上一帧状态

  uniform UARGS {
    vec2 grids;   // 水平、垂直格子数量
    float row;
    float startCol;
    float endCol;
  };

  // https://www.shadertoy.com/view/MsS3Wc
  // Smooth HSV to RGB conversion 
  vec3 hsv2rgb_smooth(in vec3 c) {
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	
    return c.z * mix(vec3(1.0), rgb, c.y);
  }

  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d - c) + c;
  }

  void main()
  {
    vec2 uv = v_uv0.xy;

    // 网格化
    // vec2 guv = fract(uv * grids);
    vec2 gi = floor(uv * grids);

    // 从频域数据上采样，uv.x对应频率
    // todo: optimize Remap
    float col = Remap(0., 1., startCol, endCol, gi.x / grids.x);  // 将uv从[0, 1]映射到当前采样对应的纹理区间
    float v = texture(texture, vec2(col, row)).r;

    // mix with tex2
    // float v2 = texture(tex2, uv).r;
    // v = max(v, v2-(0.5/2./grids.y)); // 每帧最多下降0.5格

    vec4 color = vec4(vec3(v), 1.);
    gl_FragColor = color;
  }
}%
